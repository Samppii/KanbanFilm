// SQLite version for quick testing

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PROJECT_MANAGER
  TEAM_MEMBER
  CLIENT
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectStatus {
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum StageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum ActivityType {
  PROJECT_CREATED
  STAGE_CHANGED
  PROGRESS_UPDATED
  COMMENT_ADDED
  FILE_UPLOADED
  DEADLINE_UPDATED
  BUDGET_UPDATED
  TEAM_MEMBER_ADDED
  CLIENT_FEEDBACK
}

enum FileCategory {
  SCRIPT
  STORYBOARD
  RAW_FOOTAGE
  FINAL_VIDEO
  AUDIO
  GRAPHICS
  DOCUMENT
  CONTRACT
  OTHER
}

enum NotificationType {
  PROJECT_UPDATE
  DEADLINE_REMINDER
  TEAM_MENTION
  CLIENT_FEEDBACK
  FILE_UPLOAD
  STAGE_COMPLETION
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  firstName     String
  lastName      String
  avatarUrl     String?
  role          UserRole @default(TEAM_MEMBER)
  department    String?
  phone         String?
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  managedProjects   Project[]              @relation("ProjectManager")
  activities        ProjectActivity[]
  comments          ProjectComment[]
  files             ProjectFile[]
  notifications     Notification[]
  teamMemberships   ProjectTeamMember[]
  refreshTokens     RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  company     String?
  website     String?
  logoUrl     String?
  industry    String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects Project[]

  @@map("clients")
}

model Project {
  id                String        @id @default(cuid())
  title             String
  description       String?
  brief             String?
  clientId          String
  projectManagerId  String
  stage             String        @default("1")
  priority          PriorityLevel @default(MEDIUM)
  status            ProjectStatus @default(ACTIVE)
  progress          Int           @default(0)
  budget            Float?
  currency          String        @default("USD")
  startDate         DateTime?
  endDate           DateTime?
  actualStartDate   DateTime?
  actualEndDate     DateTime?
  tags              String        @default("")
  metadata          String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  client        Client                @relation(fields: [clientId], references: [id])
  projectManager User                 @relation("ProjectManager", fields: [projectManagerId], references: [id])
  details       ProjectDetails?
  stages        ProjectStage[]
  activities    ProjectActivity[]
  comments      ProjectComment[]
  files         ProjectFile[]
  teamMembers   ProjectTeamMember[]

  @@map("projects")
}

model ProjectDetails {
  id                      String   @id @default(cuid())
  projectId               String   @unique
  projectType             String
  genre                   String?
  duration                String?
  technicalRequirements   String?
  productionRequirements  String?
  paymentTerms            String?
  deliverables            String   @default("")
  additionalNotes         String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_details")
}

model ProjectStage {
  id          String      @id @default(cuid())
  projectId   String
  stageNumber Int
  stageName   String
  status      StageStatus @default(PENDING)
  progress    Int         @default(0)
  startDate   DateTime?
  endDate     DateTime?
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_stages")
}

model ProjectActivity {
  id           String       @id @default(cuid())
  projectId    String
  userId       String?
  activityType ActivityType
  title        String
  description  String?
  metadata     String?
  createdAt    DateTime     @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])

  @@map("project_activities")
}

model ProjectComment {
  id              String           @id @default(cuid())
  projectId       String
  userId          String
  parentCommentId String?
  content         String
  isInternal      Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  project       Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id])
  parentComment ProjectComment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies       ProjectComment[] @relation("CommentReplies")

  @@map("project_comments")
}

model ProjectFile {
  id               String       @id @default(cuid())
  projectId        String
  userId           String
  filename         String
  originalFilename String
  fileUrl          String
  fileSize         Int
  mimeType         String
  fileType         FileCategory
  description      String?
  createdAt        DateTime     @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@map("project_files")
}

model ProjectTeamMember {
  id              String    @id @default(cuid())
  projectId       String
  userId          String
  role            String
  responsibilities String   @default("")
  hourlyRate      Float?
  isLead          Boolean   @default(false)
  joinedAt        DateTime  @default(now())
  leftAt          DateTime?

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@map("project_team_members")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  metadata  String?
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}